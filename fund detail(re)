# TEMU 平台资金明细自动合并脚本（适用于 Jupyter Notebook）

import pandas as pd
import numpy as np
from collections import defaultdict

# 路径配置

excel_path = ""

# 读取所有 sheet
all_sheets = pd.read_excel(excel_path, sheet_name=None)

# 初始化结果表和各类型名称
sheet_map = {
    "交易收入": None,
    "运费收入": None,
    "售后退款": None,
    "运费退款": None,
}

# 定义关键字查找定位 sheet
for sheet_name, df in all_sheets.items():
    if "交易收入" in sheet_name:
        sheet_map["交易收入"] = df[['订单编号', '交易收入']]
    elif "运费收入" in sheet_name:
        sheet_map["运费收入"] = df[['订单编号', '运费收入']]
    elif "售后退款" in sheet_name:
        sheet_map["售后退款"] = df[['订单编号', '售后退款金额']]
    elif "运费退款" in sheet_name:
        sheet_map["运费退款"] = df[['订单编号', '运费退款']]

# 全部表格的订单编号加序号，处理重复
renamed = {}
for key, df in sheet_map.items():
    if df is not None:
        df = df.copy()
        df['订单编号'] = df['订单编号'].astype(str)
        df['_seq'] = df.groupby('订单编号').cumcount() + 1
        df['订单编号_序号'] = df['订单编号'] + '_' + df['_seq'].astype(str)
        renamed[key] = df.drop(columns=['_seq'])

# 以交易收入为主表，如果不存在则创建空表
main_df = renamed.get("交易收入", pd.DataFrame(columns=['订单编号', '交易收入', '订单编号_序号']))

# 同步融合其他列
for key in ["运费收入", "售后退款", "运费退款"]:
    df = renamed.get(key)
    if df is not None:
        main_df = pd.merge(main_df, df.drop(columns=['订单编号']), on='订单编号_序号', how='outer')

# 算出平台回款
main_df[['交易收入', '运费收入', '售后退款金额', '运费退款']] = main_df[[
    '交易收入', '运费收入', '售后退款金额', '运费退款']].fillna(0)
main_df['平台回款'] = main_df['交易收入'] + main_df['运费收入'] - main_df['售后退款金额'] - main_df['运费退款']

# 按需排列（可选）
main_df = main_df.sort_values(by='订单编号')


# 若原始订单编号为空，根据“订单编号_序号”提取回原始订单编号
main_df['订单编号'] = main_df.apply(
    lambda row: row['订单编号'] if pd.notnull(row['订单编号']) else row['订单编号_序号'].rsplit('_', 1)[0],
    axis=1
)


# 输出
main_df.to_excel("", index=False)
print("✅ 汇总完成，已导出为 Excel 文件。")







import pandas as pd
import re

# === 路径设置 ===
回款路径 = ''
资金表路径 = ''  # 替换为你的实际路径
资金sheet名 = '结算-交易收入'

# === 读取数据 ===
回款_df = pd.read_excel(回款路径)
资金_df = pd.read_excel(资金表路径, sheet_name=资金sheet名)

# === 提取 SKU 和 数量（履约件数 = pcs 前数字 × 最后一段数字）
def extract_info(row):
    try:
        parts = str(row).split('_')
        model = parts[1].split('*')[0]  # C31W
        x = int(re.findall(r'\d+', parts[-2])[0])  # pcs 前的数量，如 4
        y = int(parts[-1])  # 最后一段的数量，如 25
        total_qty = x * y
        return pd.Series([model, total_qty])
    except:
        return pd.Series([None, None])

资金_df[['SKU', '数量']] = 资金_df['SKU明细(SkuID_SKU货号_SKU名称_SKU属性_销售数量)'].apply(extract_info)

# === 字段标准化
资金_df['订单编号'] = 资金_df['订单编号'].astype(str)
回款_df['订单编号'] = 回款_df['订单编号'].astype(str)

资金_df['交易收入'] = pd.to_numeric(资金_df['交易收入'], errors='coerce').round(2)
回款_df['交易收入'] = pd.to_numeric(回款_df['交易收入'], errors='coerce').round(2)

# === 去重资金表，避免合并放大
资金_df_unique = (
    资金_df
    .drop_duplicates(subset=['订单编号', '交易收入'])
    [['订单编号', '交易收入', 'SKU', '数量']]
)

# === 合并
merged_df = pd.merge(
    回款_df,
    资金_df_unique,
    on=['订单编号', '交易收入'],
    how='left'
)

# === 调整列顺序：将 SKU 和 数量 放在订单编号后面
cols = list(merged_df.columns)
if 'SKU' in cols and '数量' in cols and '订单编号' in cols:
    idx = cols.index('订单编号')
    # 移除后插入
    cols.remove('SKU')
    cols.remove('数量')
    cols.insert(idx + 1, 'SKU')
    cols.insert(idx + 2, '数量')
    merged_df = merged_df[cols]

# === 导出结果
merged_df.to_excel('回款与SKU匹配结果.xlsx', index=False)
print("✅ 匹配完成，已保存为：回款与SKU匹配结果.xlsx")
